Stock Price Prediction Using LSTM

This project demonstrates how to use an LSTM (Long Short-Term Memory) neural network to predict stock prices based on historical data. The application involves preprocessing a stock dataset, building an LSTM model, and training it to predict future stock prices. The trained model can be deployed in a web application for practical use.

Table of Contents

Overview

Features

Technologies Used

Setup Instructions

How to Run

Model Development

Results and Evaluation

Deployment (Optional)

Overview

This project uses a stock dataset containing information such as Open, High, Low, Close, and Volume to train an LSTM model. The goal is to predict future closing prices based on 60 days of historical data. Feature engineering, data normalization, and model evaluation are integral parts of the pipeline.

Features

Preprocessing: Handles missing values, cleans data, and normalizes numerical columns.

Feature Engineering: Includes moving averages, lag features, and other technical indicators.

LSTM Model: Sequential model with multiple layers to handle time-series data.

Metrics: Evaluates the model using RMSE and MAE.

Visualization: Plots actual vs. predicted stock prices for analysis.

Model Saving: Saves the trained model and scaler for deployment.

Technologies Used

Python

Pandas

NumPy

Matplotlib

Scikit-learn

TensorFlow/Keras

Setup Instructions

Clone this repository:

git clone https://github.com/your-repository/stock-price-prediction.git
cd stock-price-prediction

Install required libraries:

pip install -r requirements.txt

Place your dataset (your_dataset.csv) in the root directory. Ensure the dataset has the following columns:

Date

Open

High

Low

Close

Volume

How to Run

Open the Python file stock_price_prediction.py.

Ensure the dataset path is correct.

Run the script:

python stock_price_prediction.py

The script will:

Preprocess the data

Train the LSTM model

Save the trained model (stock_price_model.h5) and scaler (scaler.pkl)

Display evaluation metrics and plot actual vs. predicted prices

Model Development

Preprocessing

Converts the Date column to a datetime object.

Cleans and formats numerical columns (removes commas, converts to floats).

Adds moving averages and lag features.

Normalizes features using MinMaxScaler.

LSTM Model

Sequential model with the following architecture:

LSTM layers with 50 units each and dropout regularization.

Dense layers to output the predicted value.

Compiled using the Adam optimizer and mean squared error loss function.

Training

Uses 80% of the data for training and 20% for testing.

Early stopping prevents overfitting.

Results and Evaluation

Metrics:

Root Mean Squared Error (RMSE)

Mean Absolute Error (MAE)

Visualization:

Compares actual vs. predicted stock prices using a line plot.

Deployment (Optional)

Steps to Deploy

Use Flask or Django to build a web application.

Load the trained model (stock_price_model.h5) and scaler (scaler.pkl).

Create an interface to:

Input new data.

Preprocess the data using the saved scaler.

Predict stock prices using the model.

Display results on the web app.

Deploy the web application on a platform like Heroku or AWS.

Contact

If you have any questions or encounter issues, feel free to contact me at nooruddin4201sn@gmail.com .
